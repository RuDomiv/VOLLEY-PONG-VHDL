LIBRARY IEEE;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY CounterPositions IS
    GENERIC ( N : INTEGER := 11);
    PORT (
        rst      : IN  STD_LOGIC;  
        ena      : IN  STD_LOGIC;  
        syn_clr  : IN  STD_LOGIC;  
        load     : IN  STD_LOGIC;  -- Carga un valor específico
        up       : IN  STD_LOGIC;  -- Joystick hacia arriba
        down     : IN  STD_LOGIC;  -- Joystick hacia abajo
        d        : IN  STD_LOGIC_VECTOR(N-1 DOWNTO 0); -- Valor inicial
        max_tick : OUT STD_LOGIC; -- Indica valor máximo pantalla
        min_tick : OUT STD_LOGIC; -- Indica valor mínimo pantalla
        counter  : OUT STD_LOGIC_VECTOR(N-1 DOWNTO 0) -- Valor actual
    );
END ENTITY;

ARCHITECTURE rtl OF CounterPositions IS
    CONSTANT ONES  : UNSIGNED(N-1 DOWNTO 0) := (OTHERS => '1'); -- Valor máximo
    CONSTANT ZEROS : UNSIGNED(N-1 DOWNTO 0) := (OTHERS => '0'); -- Valor mínimo
    CONSTANT MAX 	 : UNSIGNED(N-1 DOWNTO 0) := "01100100000"; -- Valor mínimo suponiendo solo un cuadrado
	 
    SIGNAL count_s : UNSIGNED(N-1 DOWNTO 0); -- Valor actual del contador
    SIGNAL up_prev : STD_LOGIC := '0'; -- Estado anterior del joystick arriba
    SIGNAL down_prev : STD_LOGIC := '0'; -- Estado anterior del joystick abajo

BEGIN
    -- Proceso para detectar cambios en el joystick y actualizar el contador
    PROCESS (up, down, rst, syn_clr, load)
    BEGIN
        IF rst = '1' THEN
            count_s <= ZEROS; -- Reinicio a 0
        ELSIF syn_clr = '1' THEN
            count_s <= ZEROS; -- Borrado síncrono
        ELSIF load = '1' THEN
            count_s <= UNSIGNED(d); -- Carga valor inicial
        ELSIF ena = '1' THEN
            -- Incrementa si hay flanco ascendente en 'up'
            IF up = '1' AND up_prev = '0' THEN
                IF count_s  < ONES THEN
                    count_s <= count_s + 1;
                END IF;
            END IF;

            -- Decrementa si hay flanco ascendente en 'down'
            IF down = '1' AND down_prev = '0' THEN
                IF count_s > ZEROS THEN
                    count_s <= count_s - 1;
                END IF;
            END IF;
        END IF;

        -- Actualiza estados anteriores de 'up' y 'down'
        up_prev <= up;
        down_prev <= down;
    END PROCESS;

    -- Asigna el valor del contador a la salida
    counter <= STD_LOGIC_VECTOR(count_s);

    -- Lógica de límites máximo y mínimo
    max_tick <= '1' WHEN count_s = MAX ELSE '0';
    min_tick <= '1' WHEN count_s = ZEROS ELSE '0';

END ARCHITECTURE;